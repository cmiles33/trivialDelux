/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewPack;



import java.awt.Color;


import java.util.Scanner;


import java.io.FileWriter;

import modelPack.Track;
import controllerPack.BoardTrack;
import controllerPack.DatabaseConnector;


import java.util.ArrayList;
import java.util.List;

import viewPack.paintFigures.RedSquare;

import javax.swing.Timer;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;


import modelPack.Player;


import modelPack.Subject;
import modelPack.Question;

import controllerPack.DiceRoll;


/**
 *This is THE game board.
 * <p>
 * This contains all the logic of the game. It controls the board
 * traversal logic and prompts questions and updates the models
 * promptly after a question has been answered. 
 * @author calebmiles
 */
public class GameBoard extends javax.swing.JFrame {

    /**
     * This function is main function
     * for setting up the model and default view of the board
     * @param newSubjects int array of subjects
     * @param newPlayers string array of player names
     * @param playerNumber int number of players
     */
    public GameBoard(int [] newSubjects, String [] newPlayers,int playerNumber) {
        initComponents();
        BoardPanel myPanel = new BoardPanel();
        this.setTitle("Game Board");
        this.setLocationRelativeTo(null);
        // Setting visual components to default state.
        this.exitButton.setVisible(false);
        this.directionChoose.removeAllItems();
        this.directionChoose.addItem("1");
        this.directionChoose.addItem("2");
        this.directionChoose.addItem("3");
        this.directionChoose.addItem("4");
        this.directionChoose.addItem("5");
        this.directionChoose.addItem("6");
        this.questionLabel.setText("<html><h3>Welcome! Get ready to answer trivia!<h3><html>");
        this.rollerLabel.setText("");
        
        // Setting model to default state.
        this.loadBoard();
        this.loadSubjects(newSubjects, newPlayers, playerNumber);
        this.loadPlayers();
        this.defaultView();
        this.updatePlayerStatus();
        
        //Time function for the question bar.
        ActionListener countDown = new ActionListener()
                {
                    
                    public void actionPerformed(ActionEvent evt)
                    {
                        countDownNumber--;
                        if(countDownNumber == 0)
                        {
                            myTimer.stop();
                            questionTimer.setValue(countDownNumber);
                            checkQuestion(5);
                        }
                        else
                        {
                            questionTimer.setValue(countDownNumber);
                        }
                    }
                };
        // Time for timed questions.
        this.myTimer = new Timer(100,countDown);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTeal = new javax.swing.JLabel();
        labelRed = new javax.swing.JLabel();
        labelGreen = new javax.swing.JLabel();
        labelPurple = new javax.swing.JLabel();
        labelOrange = new javax.swing.JLabel();
        labelYello = new javax.swing.JLabel();
        subject1Label = new javax.swing.JLabel();
        subject2Label = new javax.swing.JLabel();
        subject3Label = new javax.swing.JLabel();
        subject4Label = new javax.swing.JLabel();
        subject5Label = new javax.swing.JLabel();
        subject6Label = new javax.swing.JLabel();
        choice1 = new javax.swing.JButton();
        choice2 = new javax.swing.JButton();
        choice3 = new javax.swing.JButton();
        choice4 = new javax.swing.JButton();
        questionLabel = new javax.swing.JLabel();
        questionTimer = new javax.swing.JProgressBar();
        leftDirection = new javax.swing.JButton();
        inwardDirection = new javax.swing.JButton();
        rolldice = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        instructionLabel = new javax.swing.JLabel();
        boardPanel1 = new viewPack.BoardPanel();
        directionChoose = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        playerStatus = new javax.swing.JTextArea();
        exitButton = new javax.swing.JButton();
        rollerLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        labelTeal.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        labelTeal.setForeground(new java.awt.Color(51, 204, 255));
        labelTeal.setText("Teal");

        labelRed.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        labelRed.setForeground(new java.awt.Color(255, 51, 51));
        labelRed.setText("Red");

        labelGreen.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        labelGreen.setForeground(new java.awt.Color(0, 153, 0));
        labelGreen.setText("Green");

        labelPurple.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        labelPurple.setForeground(new java.awt.Color(153, 0, 255));
        labelPurple.setText("Purple");

        labelOrange.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        labelOrange.setForeground(new java.awt.Color(204, 153, 0));
        labelOrange.setText("Orange");

        labelYello.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        labelYello.setForeground(new java.awt.Color(255, 204, 102));
        labelYello.setText("Yellow");

        subject1Label.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        subject1Label.setText("subject1");
        subject1Label.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        subject1Label.setMaximumSize(new java.awt.Dimension(200, 22));
        subject1Label.setMinimumSize(new java.awt.Dimension(200, 22));

        subject2Label.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        subject2Label.setText("subject2");
        subject2Label.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        subject2Label.setMaximumSize(new java.awt.Dimension(200, 22));
        subject2Label.setMinimumSize(new java.awt.Dimension(200, 22));

        subject3Label.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        subject3Label.setText("subject3");
        subject3Label.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        subject3Label.setMaximumSize(new java.awt.Dimension(200, 22));
        subject3Label.setMinimumSize(new java.awt.Dimension(200, 22));

        subject4Label.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        subject4Label.setText("subject4");
        subject4Label.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        subject4Label.setMaximumSize(new java.awt.Dimension(200, 22));
        subject4Label.setMinimumSize(new java.awt.Dimension(200, 22));

        subject5Label.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        subject5Label.setText("subject5");
        subject5Label.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        subject5Label.setMaximumSize(new java.awt.Dimension(200, 22));
        subject5Label.setMinimumSize(new java.awt.Dimension(200, 22));

        subject6Label.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        subject6Label.setText("subject6");
        subject6Label.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        subject6Label.setMaximumSize(new java.awt.Dimension(200, 22));
        subject6Label.setMinimumSize(new java.awt.Dimension(200, 22));

        choice1.setText("choice1");
        choice1.setMinimumSize(new java.awt.Dimension(440, 25));
        choice1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choice1ActionPerformed(evt);
            }
        });

        choice2.setText("choice2");
        choice2.setMinimumSize(new java.awt.Dimension(440, 25));
        choice2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choice2ActionPerformed(evt);
            }
        });

        choice3.setText("choice3");
        choice3.setMinimumSize(new java.awt.Dimension(440, 25));
        choice3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choice3ActionPerformed(evt);
            }
        });

        choice4.setText("choice4");
        choice4.setMinimumSize(new java.awt.Dimension(440, 25));
        choice4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choice4ActionPerformed(evt);
            }
        });

        questionLabel.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        questionLabel.setText("questionText");
        questionLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255), 3));

        questionTimer.setBackground(new java.awt.Color(255, 255, 51));
        questionTimer.setForeground(new java.awt.Color(255, 51, 51));

        leftDirection.setText("left");
        leftDirection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftDirectionActionPerformed(evt);
            }
        });

        inwardDirection.setText("Inward");
        inwardDirection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inwardDirectionActionPerformed(evt);
            }
        });

        rolldice.setText("Roll Dice");
        rolldice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rolldiceActionPerformed(evt);
            }
        });

        startButton.setText("Start!");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        instructionLabel.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        instructionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        instructionLabel.setText("instruction Dialog");
        instructionLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204)));

        javax.swing.GroupLayout boardPanel1Layout = new javax.swing.GroupLayout(boardPanel1);
        boardPanel1.setLayout(boardPanel1Layout);
        boardPanel1Layout.setHorizontalGroup(
            boardPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 544, Short.MAX_VALUE)
        );
        boardPanel1Layout.setVerticalGroup(
            boardPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 521, Short.MAX_VALUE)
        );

        directionChoose.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        directionChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directionChooseActionPerformed(evt);
            }
        });

        playerStatus.setColumns(20);
        playerStatus.setRows(5);
        jScrollPane1.setViewportView(playerStatus);

        exitButton.setText("EXIT.");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        rollerLabel.setFont(new java.awt.Font("Cantarell", 1, 14)); // NOI18N
        rollerLabel.setText("Roller");

        jLabel1.setText("Colors");

        jLabel2.setText("Subjects");

        jButton1.setText("Return to Menu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boardPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(leftDirection, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rolldice, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(inwardDirection, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(questionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(exitButton))
                        .addComponent(questionTimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(instructionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(choice1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(choice2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(choice3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(choice4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelYello)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(5, 5, 5)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labelRed)
                                        .addComponent(labelTeal)
                                        .addComponent(labelGreen)))
                                .addComponent(labelOrange)
                                .addComponent(labelPurple)
                                .addComponent(jLabel1))
                            .addGap(49, 49, 49)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(subject6Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subject5Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subject4Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subject3Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subject2Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subject1Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(directionChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rollerLabel))
                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTeal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subject1Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRed)
                    .addComponent(subject2Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelGreen)
                    .addComponent(subject3Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPurple)
                    .addComponent(subject4Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelOrange)
                    .addComponent(subject5Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelYello)
                    .addComponent(subject6Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(exitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(questionLabel)))
                .addGap(49, 49, 49)
                .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(choice2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(choice3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(choice4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(questionTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(instructionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(directionChoose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rollerLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(boardPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leftDirection)
                    .addComponent(inwardDirection))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rolldice)
                    .addComponent(startButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(0, 27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * The choice buttons call check question when clicked by the user
     * This gets sent to be checked by the checkquestion function
     * @param evt javax event
     */
    private void choice1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choice1ActionPerformed
        // TODO add your handling code here:
        if(this.accepting)
            this.checkQuestion(0);
    }//GEN-LAST:event_choice1ActionPerformed
    /**
     * The choice buttons call check question when clicked by the user
     * This gets sent to be checked by the checkquestion function
     * @param evt javax event
     */
    private void choice2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choice2ActionPerformed
        // TODO add your handling code here:
        if(this.accepting)
            this.checkQuestion(1);
    }//GEN-LAST:event_choice2ActionPerformed
    /**
     * When the start button is pressed, pic selection is called
     * to allow the user to pick their direction.
     * @param evt javax event
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        this.playerTurn(this.currentPlayer);
        this.ready = true;
        this.pickDirection(false);
    }//GEN-LAST:event_startButtonActionPerformed
    /**
     * This is the roll dice action
     * <p>
     * This is a very important function that contains the logic of what
     * to do next. It rolls the dice and calculates the players next space.
     * It also enables and disables certain parts of the board so the player
     * is forced to react.
     * 
     * There are two exiting states of this function.
     * 
     * If after the roll the user is on a normal space on the board, it will
     * prompt the next question for the user.
     * 
     * If after the roll the user is on a space with an edge, the continue
     * function is forced by only allowing the user to press the directional
     * buttons.
     * 
     * Once the user pushes a directional button the continue function
     * takes the remaining spaces held in the player model and moves the user to the 
     * space. 
     * 
     * @param evt javax event when the button is pressed
     */
    private void rolldiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rolldiceActionPerformed
        // TODO add your handling code here:
        this.directionChoose.setVisible(false);
        this.ready = false;
        int number = this.boardDice.rollDice(6);
        int playerNum = this.currentPlayer;
        this.rollerLabel.setText("You rolled a " + number);
        int playerSelected = 0;
        
        // get the player
        Player temp;
        this.players.get(playerNum).setExtraMoves(0);
        
        temp = this.players.get(playerNum);
        
        BoardTrack current;
        int start;
        
        if(temp.getCurrentBoard() == null)
        {
            temp.setBoardTrack(this.boardLocations.get(playerSelected)); 
            temp.setTrackNum(0);
            current = temp.getCurrentBoard();
            start = temp.getTrackNum(); // this zero
        }
        else
        {
            current = temp.getCurrentBoard();
            start = temp.getTrackNum(); // this can be what ever
        }
        
        if(temp.getNegative())
        {
            int nextPosition = start - number;
            System.out.println("Negative Direction");
            System.out.println("Our next place: " + nextPosition);
            if(nextPosition < 0)
            {
                System.out.println("go back to middle");
                int postivePos = (nextPosition + start) - 2*(nextPosition + start);
                System.out.println("Positive Calculations " + postivePos);
                this.players.get(playerNum).setExtraMoves(postivePos);
                this.directionChoose.setVisible(true);
                this.ready = true;
                        String infoText = "<html><p> Please Pick a new direction."
                + " <p><html>";
                this.instructionLabel.setText(infoText);
                // Call get new board 
                //this.pickDirection();
            }
            else
            {
                System.out.println("go normal");
                this.players.get(playerNum).setTrackNum(nextPosition);
                int X = current.getTrackList().get(nextPosition).getX();
                int Y = current.getTrackList().get(nextPosition).getY();
                this.boardPanel1.moveSquare(X, Y);
                this.leftDirection.setEnabled(false);
                this.inwardDirection.setEnabled(false);
                this.displayQuestion();
            }
            
        }
        else
        {
            int nextPosition = start + number ;
            System.out.println("Our next Position: " + nextPosition);
            int tracksLeft = 0 ;
            if (nextPosition > 6 && (start < 7))
            {
                System.out.println("Got to fork");
                tracksLeft = nextPosition - 6;
                System.out.println("Moves left after fork: " + tracksLeft);
                nextPosition = 6;
                int X = current.getTrackList().get(nextPosition-1).getX();
                int Y = current.getTrackList().get(nextPosition-1).getY();
                this.boardPanel1.moveSquare(X, Y);
                this.players.get(playerNum).setTrackNum(nextPosition);
                this.players.get(playerNum).setExtraMoves(tracksLeft);

                this.leftDirection.setEnabled(true);
                this.leftDirection.setText("Left");
                this.inwardDirection.setEnabled(true);
                this.instructionLabel.setText("Please Choose a Direction.");
                this.rolldice.setEnabled(false);

            }
            else
            {
                if(nextPosition > 13 && (start > 5))
                {
                    System.out.println("Got to fork 2");
                    tracksLeft = nextPosition - 12 ;
                    //nextPosition = 11;
                    System.out.println("Tracksleft " + tracksLeft);

                    BoardTrack edge = current.getTrackList().get(11).getEdge();
                    this.players.get(playerNum).setTrackNum(6);
                    this.players.get(playerNum).setBoardTrack(edge);
                    this.players.get(playerNum).setExtraMoves(tracksLeft);
                    int X = edge.getTrackList().get(5).getX();
                    int Y = edge.getTrackList().get(5).getY();
                    this.boardPanel1.moveSquare(X, Y);

                    this.leftDirection.setEnabled(true);
                    this.leftDirection.setText("Straight");
                    this.inwardDirection.setEnabled(true);
                    this.instructionLabel.setText("Please Choose a Direction.");
                    this.rolldice.setEnabled(false);
                    //this.rolldice.setEnabled(false);
                    


                }
                else if(nextPosition == 13)
                {
                    System.out.println("go to piece spot");
                    BoardTrack edge = current.getTrackList().get(11).getEdge();
                    this.players.get(playerNum).setTrackNum(6);
                    this.players.get(playerNum).setBoardTrack(edge);
                    int X = edge.getTrackList().get(5).getX();
                    int Y = edge.getTrackList().get(5).getY();
                    this.boardPanel1.moveSquare(X, Y);
                    this.leftDirection.setEnabled(false);

                    // get question
                    this.displayQuestion();
                }
                else
                {
                    System.out.println("go normal");
                    this.players.get(playerNum).setTrackNum(nextPosition);
                    int X = current.getTrackList().get(nextPosition-1).getX();
                    int Y = current.getTrackList().get(nextPosition-1).getY();
                    this.boardPanel1.moveSquare(X, Y);
                    this.leftDirection.setEnabled(false);
                    this.inwardDirection.setEnabled(false);
                    // get question
                    this.displayQuestion();
                }
            }
        }
        
    }//GEN-LAST:event_rolldiceActionPerformed
    /**
     * This function called by the inward button, allows the player
     * to start moving towards the inside of the board
     * and changes the player direction to negative, which is
     * then handled by the continue moving function.
     * @param evt javax event
     */
    private void inwardDirectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inwardDirectionActionPerformed
        // TODO add your handling code here:
        
        // set the current piece to negitive
        // if conditons are met
        // call continue moving
        Player temp = this.players.get(this.currentPlayer);
        //BoardTrack current = temp.getCurrentBoard();
        temp.setNegitive(true);
        if(temp.getTrackNum() == 6)
        {
            this.continueMoving();
        }
        
    }//GEN-LAST:event_inwardDirectionActionPerformed
    /**
     * This function called by the left / straight button
     * allows the user to continue in the same direction.
     * This is then handled by the continue moving function
     * @param evt javax event
     */
    private void leftDirectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftDirectionActionPerformed
        // TODO add your handling code here:
        Player temp = this.players.get(this.currentPlayer);

        if(temp.getTrackNum() == 6)
        {
            // stay on track tbh
            this.continueMoving();
            
        }

    }//GEN-LAST:event_leftDirectionActionPerformed
    /**
     * This function handles when the player has reached the center of the board
     * Once the player has clicked their new direction, they are moved to the next
     * spot on the board by the continue moving function.
     * 
     * @param evt javax event
     */
    private void directionChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directionChooseActionPerformed
        // TODO add your handling code here:
        System.out.println(evt.getID());
        
        System.out.println("I did an action");
        if(this.ready)
        {
            if( this.players.get(this.currentPlayer).getNegative())
            {
                String direction = this.directionChoose.getSelectedItem().toString();
                int numDirection = Integer.parseInt(direction) - 1;
                BoardTrack next = this.boardLocations.get(numDirection);
                this.players.get(this.currentPlayer).setBoardTrack(next);
                this.players.get(this.currentPlayer).setNegitive(false);
                this.continueMoving();
            }
            else
            {
                String direction = this.directionChoose.getSelectedItem().toString();
                int numDirection = Integer.parseInt(direction) - 1;
                BoardTrack next = this.boardLocations.get(numDirection);
                this.players.get(this.currentPlayer).setBoardTrack(next);
                this.rolldice.setEnabled(true);
            }
        }

    }//GEN-LAST:event_directionChooseActionPerformed
    /**
     * The choice buttons call check question when clicked by the user
     * This gets sent to be checked by the checkquestion function
     * @param evt javax event
     */
    private void choice3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choice3ActionPerformed
        // TODO add your handling code here:
        if(this.accepting)
            this.checkQuestion(2);
    }//GEN-LAST:event_choice3ActionPerformed
    /**
     * The choice buttons call check question when clicked by the user
     * This gets sent to be checked by the checkquestion function
     * @param evt javax event
     */
    private void choice4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choice4ActionPerformed
        // TODO add your handling code here:
        if(this.accepting)
            this.checkQuestion(3);
    }//GEN-LAST:event_choice4ActionPerformed
    /**
     * This button only is enabled once the game has selected a winner. Brutal.
     * 
     * @param evt javax event when the button is pressed
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitButtonActionPerformed
    /**
     * This button is the return to menu function
     * @param evt javax event
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        MainMenu nextMenu = new MainMenu();
        this.setVisible(false);
        nextMenu.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * This is the continue moving function
     * <p>
     * This function has an important role 
     * in moving the players piece around the board.
     * 
     * This function is only called after the player has reached an edge 
     * and still has moves left.
     * 
     * It takes the moves left and calculates the players next position.
     * 
     * Once it has done this, the function call the prompt question
     * and the player answers a question.
     * 
     */
    private void continueMoving()
    {
        System.out.println("Continue going");
        Player temp = this.players.get(this.currentPlayer);
        BoardTrack current = temp.getCurrentBoard();
        int playerNum = this.currentPlayer;
        System.out.println("going normal");
        if(temp.getNegative())
        {
            if (temp.getExtra() == 6)
            {
                temp.setExtraMoves(5);
            }
            int moves = 5 - temp.getExtra() ;
            this.players.get(playerNum).setTrackNum(moves+1);
            int X = current.getTrackList().get(moves).getX();
            int Y = current.getTrackList().get(moves).getY();
            this.boardPanel1.moveSquare(X, Y);
            this.leftDirection.setEnabled(false);
            this.inwardDirection.setEnabled(false);
            
            this.displayQuestion();
        }
        else
        {
            int moves = temp.getExtra() + temp.getTrackNum();
            this.players.get(playerNum).setTrackNum(moves);
            int X = current.getTrackList().get(moves-1).getX();
            int Y = current.getTrackList().get(moves-1).getY();
            this.boardPanel1.moveSquare(X, Y);
            this.leftDirection.setEnabled(false);
            this.inwardDirection.setEnabled(false);
           
            this.displayQuestion();
        }

        // now call for question at current square
        // for the current player 
        
    }
    /**
     * This function bring the board into the selection
     * state for the next player
     * @param nextPlay informs function which info to display.
     */
    private void pickDirection(boolean nextPlay)
    {
        System.out.println("Pick selection");
        if(nextPlay)
        {
            String infoText = "<html><p> "
                + " Next player. Please choose your starting Direction."
                + " <p><html>";
            this.instructionLabel.setText(infoText);
        }
        else
        {
            String infoText = "<html><p> "
                + " Each number represents"
                + " a spoke on the board. 1 Starting with the left most"
                + " continuing counter clockwise.<p><html>";
            this.instructionLabel.setText(infoText);
        }
        
        String questInfo = "<html><p> Pick a direction! <br><br> Then roll the dice!"
                + " <p><html>";
        
        this.questionLabel.setText(questInfo);
        this.directionChoose.setVisible(true);
        this.inwardDirection.setEnabled(false);
        this.leftDirection.setEnabled(false);
        this.startButton.setEnabled(false);
        this.rolldice.setEnabled(false);
        
    }
    /**
     * This sets the defaults for the board when the 
     * game loads in.
     */
    private void loadBoard()
    {

        try{
            
            Scanner myFilerreader = new Scanner(
            this.getClass().getResourceAsStream("/dataFiles/pixelLocations2.txt"));
            Scanner myColorread = new Scanner(
            this.getClass().getResourceAsStream("/dataFiles/colorSpaces.txt"));
            
            // Track Creation Area
            
            
            for(int counter2 = 0; counter2 < 6; counter2++)
            {
                // Track Creation Area
                BoardTrack tempTrack = new BoardTrack();
                // Pixel Parse
                String line = myFilerreader.nextLine();
                //System.out.println(line);
                String [] splitStrings;
                splitStrings = line.split("\\*");
                //System.out.println(splitStrings.length);
                // Color parse
                String colorLine = myColorread.nextLine();
                String [] colorSplit = colorLine.split("\\*");
                for(int counter = 0; counter < 12; counter++)
                {
                    // Track Creation and setting Area                   
                    Track newTrack = new Track();
                    // Stripping Area
                    String [] temp;
                    String colorTemp;
                    // Pixel cord add
                    temp = splitStrings[counter].split(",");
                    String xCord = temp[0].replace(" ","");
                    String yCord = temp[1].replace(" ","");
                    // Setting Cords
                    int xLoc = Integer.parseInt(xCord);
                    int yLoc = Integer.parseInt(yCord);
                    newTrack.setCord(xLoc, yLoc);
                    // Color add
                    colorTemp = colorSplit[counter].replace(" ", "");
                    // setting color
                    newTrack.setColor(colorTemp);
                    //Adding to current board track
                    tempTrack.addTrack(newTrack);
                }
                
                this.boardLocations.add(tempTrack);
            }
            // Add edges to the board.
            BoardTrack edge = this.boardLocations.get(5);
            this.boardLocations.get(0).getTrackList().get(5).setEdge(edge);
            edge = this.boardLocations.get(0);
            this.boardLocations.get(1).getTrackList().get(5).setEdge(edge);
            edge = this.boardLocations.get(1);
            this.boardLocations.get(2).getTrackList().get(5).setEdge(edge);
            edge = this.boardLocations.get(2);
            this.boardLocations.get(3).getTrackList().get(5).setEdge(edge);
            edge = this.boardLocations.get(3);
            this.boardLocations.get(4).getTrackList().get(5).setEdge(edge);
            edge = this.boardLocations.get(4);
            this.boardLocations.get(5).getTrackList().get(5).setEdge(edge);
            
            edge = this.boardLocations.get(1);
            this.boardLocations.get(0).getTrackList().get(11).setEdge(edge);
            edge = this.boardLocations.get(2);
            this.boardLocations.get(1).getTrackList().get(11).setEdge(edge);
            edge = this.boardLocations.get(3);
            this.boardLocations.get(2).getTrackList().get(11).setEdge(edge);
            edge = this.boardLocations.get(4);
            this.boardLocations.get(3).getTrackList().get(11).setEdge(edge);
            edge = this.boardLocations.get(5);
            this.boardLocations.get(4).getTrackList().get(11).setEdge(edge);
            edge = this.boardLocations.get(0);
            this.boardLocations.get(5).getTrackList().get(11).setEdge(edge);
            

            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        
        
    }
    /**
     * This function just loads the input players
     * into the game.
     */
    private void loadPlayers()
    {
        // this will be loaded by the options menu 
        
        String [] colors = {"blue","red","green","purple","black","white"};
        String [] names = this.pNames;
        for( int counter = 0; counter < this.numberPlayers; counter++)
        {
            Player temp = new Player(names[counter],colors[counter]);
            this.players.add(temp);
        }
        
    }
    /**
     * This function handles some of the 
     * default view setting.
     */
    private void defaultView()
    {
        this.directionChoose.setVisible(false);
        this.subject1Label.setText(this.subjectList.get(0).getTopic());
        this.subject2Label.setText(this.subjectList.get(1).getTopic());
        this.subject3Label.setText(this.subjectList.get(2).getTopic());
        this.subject4Label.setText(this.subjectList.get(3).getTopic());
        this.subject5Label.setText(this.subjectList.get(4).getTopic());
        this.subject6Label.setText(this.subjectList.get(5).getTopic());
        this.choice1.setText("");
        this.choice2.setText("");
        this.choice3.setText("");
        this.choice4.setText("");
        this.leftDirection.setEnabled(false);
        this.inwardDirection.setEnabled(false);
        this.rolldice.setEnabled(false);
        this.instructionLabel.setText("Please press the start Button to begin!");
        
                
        
    }
    /**
     * This is the load subject function
     * <p>
     * This function takes information from the options screen
     * and adds it to the game.
     * 
     * @param listOfSubs contains list of subject numbers
     * @param names contains list of names 
     * @param pNumber contains the amount of players 
     */
    private void loadSubjects(int[] listOfSubs, String [] names,int pNumber)
    {
        // this will be taken from the options menu
        DatabaseConnector dataConnection = new DatabaseConnector("triviaDatabase.db");
        dataConnection.fillSubjects();
        
        for(int counter = 0 ; counter < 6; counter++)
        {
            int index = listOfSubs[counter];
            this.subjectList.add(dataConnection.getListSubjects().get(index));
        }
        this.pNames = names;
        this.numberPlayers = pNumber;

        
    }
    /**
     * This function is called when it is the next
     * players turn
     * It handles setting up the board and enable and disables certain views.
     * @param playerNum number of players
     */
    private void playerTurn(int playerNum)
    {
        // they need to roll the dice.
        // this function will set the player information
        // for their turn.
        this.currentPlayer = playerNum;
        this.choice1.setText("");
        this.choice2.setText("");
        this.choice3.setText("");
        this.choice4.setText("");
        this.leftDirection.setEnabled(false);
        this.inwardDirection.setEnabled(false);
        this.rolldice.setEnabled(true);
        this.instructionLabel.setText("Roll the dice to begin your Turn!!");
    }
    /**
     * This is the display question function
     * <p>
     * This handles the entire view and gui components
     * when it is time for a user to answer the question
     * 
     * It allows the user to click the choice buttons which calls the next
     * function to check if the user got it right or not.
     */
    private void displayQuestion()
    {
        this.directionChoose.setVisible(false);
        this.rolldice.setEnabled(false);
        this.accepting = true;
        Player tempPlayer = this.players.get(this.currentPlayer);
        BoardTrack current = tempPlayer.getCurrentBoard();
        int currentTrack = tempPlayer.getTrackNum();
        if(currentTrack == 0)
            currentTrack = 1;
        Track tempTrack = current.getTrackList().get(currentTrack-1);
        
        System.out.println("is this special? " + (currentTrack-1));
        String color = tempTrack.getColor();
        System.out.println("current color space: " + color);
        int subjectSelector = 0;
        switch(color)
        {
            case "teal":
                subjectSelector = 0;
                break;
            case "red":
                subjectSelector = 1;
                break;
            case "green":
                subjectSelector = 2;
                
                break;
            case "purple":
                subjectSelector = 3;
                break;
            case "orange": 
                subjectSelector = 4;
                break;
            case "yellow":
                subjectSelector = 5;
                break;
            default:
                // This case handles the color white
                DiceRoll rollIt = new DiceRoll();
                subjectSelector = rollIt.rollDice(5); 
                break;
                    
        }
        
        if(currentTrack-1 == 5)
        {
            // This is a special piece
            this.special = true;
            this.subjectIndex = subjectSelector;
        }
        else
        {
            // This is not a special piece
            this.special = false;
        }
        System.out.println("selector: " + subjectSelector);
        Subject tempSub = this.subjectList.get(subjectSelector);
        DiceRoll temp = new DiceRoll();
        int randomNumber = temp.rollDice(tempSub.getListQuestions().size());
        Question tempQuest;
        try
        {
            tempQuest = tempSub.getQuestion(randomNumber);
        }
        catch(Exception e)
        {
            // just incase it goes out of bounds.
            tempQuest = tempSub.getQuestion(1);
        }
        
        
        String info = "<html><p> Answer Question from: <br> "
                + tempSub.getTopic() + "<p><html>";
        this.instructionLabel.setText(info);
        this.currentQuest = tempQuest;
        String questionText = "<html> <p> "+
                tempQuest.getQuestion() +
                "<p><html>";
        this.questionLabel.setText(questionText);
        this.choice1.setText(tempQuest.getChoices().get(0));
        this.choice2.setText(tempQuest.getChoices().get(1));
        this.choice3.setText(tempQuest.getChoices().get(2));
        this.choice4.setText(tempQuest.getChoices().get(3));
        
        this.choice1.setBackground(Color.WHITE);
        this.choice2.setBackground(Color.WHITE);
        this.choice3.setBackground(Color.WHITE);
        this.choice4.setBackground(Color.WHITE);
        
        this.choice1.setEnabled(true);
        this.choice2.setEnabled(true);
        this.choice3.setEnabled(true);
        this.choice4.setEnabled(true);
        
        this.countDownNumber = 100;
        this.myTimer.start();
    }
    /**
     * this is the check question function
     * <p>
     * After a question has been prompted it allows the user to select
     * a choice. Once the user selects a choice, the choice is sent to this
     * function and checked by this function. 
     * 
     * if they run out of time this function is called by the timer
     * with the index of 5 which lets us know the player ran out of time.
     * 
     * @param index players choice input.
     */
    private void checkQuestion(int index)
    {
        this.accepting = false;
        if(index == 5)
        {
            System.out.println("you've ran out of time");
            String myInfo = "<html><p> " + "You've ran out of time."
            + " The answer was: <br>" + this.currentQuest.getAnswer() +
            ". <p><html>";
            this.questionLabel.setText(myInfo);
            this.choice1.setEnabled(false);
            this.choice2.setEnabled(false);
            this.choice3.setEnabled(false);
            this.choice4.setEnabled(false);
            this.nextPlayer();
        }
        else
        {
            String answer = this.currentQuest.getAnswer();
            String theirAnswer = this.currentQuest.getChoices().get(index);
            if(answer.equals(theirAnswer))
            {
                System.out.println("you got it correct YAYE");
                if(this.special)
                {
                    System.out.println("Adding PIECE!!!!");
                    String info;
                    info = "<html><p> You've now got a piece for this Color!" +
                            "<br>Continue to collect pieces. <p><html>";
                    this.questionLabel.setText(info);
                    System.out.println("subject Index"+ this.subjectIndex);
                    this.players.get(this.currentPlayer).addPiece(this.subjectIndex);
                    this.updatePlayerStatus();
                }
                this.myTimer.stop();
                this.questionTimer.setValue(0);
                switch(index)
                {
                    case 0:
                        this.choice1.setBackground(Color.GREEN);
                        break;
                    case 1:
                        this.choice2.setBackground(Color.GREEN);
                        break;
                    case 2: 
                        this.choice3.setBackground(Color.GREEN);
                        break;
                    case 3:
                        this.choice4.setBackground(Color.GREEN);
                        break;

                }
                this.rolldice.setEnabled(true);
                this.instructionLabel.setText("You got it right! \n Please Roll again");
            }
            else
            {
                System.out.println("you got it wrong tbh");
                this.myTimer.stop();
                this.questionTimer.setValue(0);
                switch(index)
                {
                    case 0:
                        this.choice1.setBackground(Color.RED);
                        break;
                    case 1:
                        this.choice2.setBackground(Color.RED);
                        break;
                    case 2: 
                        this.choice3.setBackground(Color.RED);
                        break;
                    case 3:
                        this.choice4.setBackground(Color.RED);
                        break;

                }
                String myInfo = "<html><p> " + "You've gotten the answer wrong."
                        + " The answer was:<br> " + this.currentQuest.getAnswer() +
                        ". <p><html>";
                this.questionLabel.setText(myInfo);
                
                this.nextPlayer();
            }
        }

    }
    /**
     * This is called after the question is checked
     * and determined that the player got the question
     * got it wrong. Function handles setting up the model
     * and setting the view.
     */
    private void nextPlayer()
    {
        System.out.println("Calling next Player");
        int sizeOf = this.players.size();
        int nextPlayer = this.currentPlayer +=1;
        if(nextPlayer > sizeOf -1)
            this.currentPlayer = 0;
        else
            this.currentPlayer = nextPlayer;
        String myInfo = "<html><p> Next player is: "
                + this.pNames[this.currentPlayer] + ".<br> Please roll dice to start! <p><html>";
  
        this.instructionLabel.setText(myInfo);
        this.rolldice.setEnabled(true);

        if(this.players.get(this.currentPlayer).getCurrentBoard() == null)
        {
            this.ready = true;
            this.boardPanel1.moveSquare(250,250);
            this.pickDirection(true);
            
        }

            
    }
    /**
     * This function is called by the view to update
     * the model 
     * If this function detects that a player has all 6 pieces
     * the final view is triggered.
     * 
     */
    private void updatePlayerStatus()
    {
        this.playerStatus.setText("");
        int sizeof = this.players.size();
        int pieceCounter = 0;
        String Info = "Players ** Pieces 1 , 2 , 3 , 4, 5, 6\n";
        this.playerStatus.append(Info);
        for(int counter = 0; counter < sizeof; counter++)
        {
            String name = this.players.get(counter).getName();
            name = name + ":            ";
            int [] pieces = this.players.get(counter).getPieces();
            this.playerStatus.append(name);
            for(int counter2 = 0 ; counter2< 6; counter2++)
            {
                String formatted = "   " + pieces[counter2] + ",";
                this.playerStatus.append(formatted);
                if(pieces[counter2] == 1)
                    pieceCounter++;
                
            }
            this.playerStatus.append("\n");
            if(pieceCounter == 6)
            {
                this.finalView(this.players.get(this.currentPlayer).getName());
                break;
            }
            pieceCounter = 0;
            
        }
        
        this.playerStatus.setCaretPosition(0);
        
        
        
        
    }
    /**
     * This is the final view.
     * <p> 
     * This is called by the update player status when
     * it is detected that a player has obtained all the pieces
     * 
     * This function locks out all the buttons on the screen and presents the 
     * exit button and announces the winner of the game. 
     * @param playerName 
     */
    private void finalView(String playerName)
    {
        this.instructionLabel.setText("Player: " + playerName + " has won!!!");
        this.rolldice.setEnabled(false);
        this.startButton.setEnabled(false);
        this.inwardDirection.setEnabled(false);
        this.leftDirection.setEnabled(false);
        String infoString = "<html> <p> " +
                playerName + " has won!!!! <br>" +
                "Please press exit to leave the game.";
        this.questionLabel.setText(infoString);
        this.exitButton.setVisible(true);
        
    }
    // My variable Delcarations
    private List<BoardTrack> boardLocations = new ArrayList<BoardTrack>();
    private FileWriter myWriter;
    private RedSquare mySquare = new RedSquare(250,250);
    private int currentPlayer = 0;
    private DiceRoll boardDice = new DiceRoll();
    private int currentSpaces = 0;
    private List<Subject> subjectList = new ArrayList<Subject>();
    private List<Player> players = new ArrayList<Player>();
    
    // Different triggers handles for the board
    private Boolean ready = false;
    private Timer myTimer;
    private int countDownNumber = 0 ;
    private Question currentQuest = null;
    private Boolean accepting = false;

    private Boolean special = false;
    private int subjectIndex;
    
    private String [] pNames = new String[6];
    private int numberPlayers;
    
    // Auto generated variables
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private viewPack.BoardPanel boardPanel1;
    private javax.swing.JButton choice1;
    private javax.swing.JButton choice2;
    private javax.swing.JButton choice3;
    private javax.swing.JButton choice4;
    private javax.swing.JComboBox<String> directionChoose;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel instructionLabel;
    private javax.swing.JButton inwardDirection;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelGreen;
    private javax.swing.JLabel labelOrange;
    private javax.swing.JLabel labelPurple;
    private javax.swing.JLabel labelRed;
    private javax.swing.JLabel labelTeal;
    private javax.swing.JLabel labelYello;
    private javax.swing.JButton leftDirection;
    private javax.swing.JTextArea playerStatus;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JProgressBar questionTimer;
    private javax.swing.JButton rolldice;
    private javax.swing.JLabel rollerLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel subject1Label;
    private javax.swing.JLabel subject2Label;
    private javax.swing.JLabel subject3Label;
    private javax.swing.JLabel subject4Label;
    private javax.swing.JLabel subject5Label;
    private javax.swing.JLabel subject6Label;
    // End of variables declaration//GEN-END:variables
}
